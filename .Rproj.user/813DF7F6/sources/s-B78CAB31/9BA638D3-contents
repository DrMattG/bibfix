if(source=='lens'){
  
  chunks <- function(d, n){      
    chunks <- split(d, ceiling(seq_along(d)/n))
    names(chunks) <- NULL
    return(chunks)
  }
  
  sets <- chunks(article_list, 500)
  
  df1 <- data.frame()
  for(i in 1:length(sets)){
    request <- paste0('{\n\t"query": {\n\t\t"terms": {\n\t\t\t"',type,'": ["', paste0('', paste(unlist(sets[i]), collapse = '", "'), '"'),']\n\t\t}\n\t},\n\t"size":500\n}')
    data <- getLENSData(token, request)
    record_json <- httr::content(data, "text")
    record_list <- jsonlite::fromJSON(record_json) 
    # report number of input articles returned
    input_number <- record_list[["total"]]
    #print(input_number)
    record_df <- data.frame(record_list)
    df1 <- dplyr::bind_rows(df1, record_df)
  }
  
  #Tidy results df
  #rename result dataframe columns to match inputs
  names(df1) <- sub('data.title', 'title', names(df1))
  names(df1) <- sub('data.abstract', 'abstract', names(df1))
  journaldata <- df1[,10]
  df1$journal <- journaldata$title
  df1$publisher <- journaldata$publisher
  names(df1) <- sub('data.year_published', 'year', names(df1))
  names(df1) <- sub('data.publication_type', 'source_type', names(df1))
  names(df1) <- sub('data.volume', 'volume', names(df1))
  names(df1) <- sub('data.issue', 'issue', names(df1))
  names(df1) <- sub('data.start_page', 'start_page', names(df1))
  names(df1) <- sub('data.end_page', 'end_page', names(df1))
  #extract first URL provided
  df1$url <- unlist(lapply(lapply(df$data.source_urls, `[[`, 2), paste0, collapse = '; '))
  #extract doi
  df1$doi <- unlist(lapply(df1$data.external_ids, function(ch) maditr::vlookup('doi', ch, result_column = 'value', lookup_column = 'type')))
  
  #collapse authors list
  authors <- list()
  for (i in 1:length(df1$data.authors)) {
    authors <- unlist(c(authors, paste0(df1$data.authors[[i]]$last_name, ', ', 
                                        df1$data.authors[[i]]$first_name, collapse = '; ')))
  }
  df1$author <- authors
  #replace blank authors (', ') with NA
  df1$author[df1$author==", "]=NA
  
  #remove irrelevant columns from df1 results
  df1 <- dplyr::select(df1, c(author, year, title, journal, volume, issue, start_page, end_page, publisher, doi, abstract, source_type, url))
  
  #replace '' with NA
  df1[df1=="NA"]=NA
  
  #lookup missing information
  #lookup authors
  doi_refs <- doi_refs %>%
    dplyr::left_join(df1, by = c("doi")) %>%
    dplyr::mutate(author = ifelse(is.na(author.x), author.y, author.x)) %>%
    dplyr::select(-c(author.x, author.y)) %>%
    dplyr::select(-c(contains('.y')))
  names(doi_refs) <- sub('.x', '', names(doi_refs))
  #lookup title
  doi_refs <- doi_refs %>%
    dplyr::left_join(df1, by = c("doi")) %>%
    dplyr::mutate(title = ifelse(is.na(title.x), title.y, title.x)) %>%
    dplyr::select(-c(title.x, title.y)) %>%
    dplyr::select(-c(contains('.y')))
  names(doi_refs) <- sub('.x', '', names(doi_refs))
  #lookup abstract
  doi_refs <- doi_refs %>%
    dplyr::left_join(df1, by = c("doi")) %>%
    dplyr::mutate(abstract = ifelse(is.na(abstract.x), abstract.y, abstract.x)) %>%
    dplyr::select(-c(abstract.x, abstract.y)) %>%
    dplyr::select(-c(contains('.y')))
  names(doi_refs) <- sub('.x', '', names(doi_refs))
  #lookup journal
  doi_refs <- doi_refs %>%
    dplyr::left_join(df1, by = c("doi")) %>%
    dplyr::mutate(journal = ifelse(is.na(journal.x), journal.y, journal.x)) %>%
    dplyr::select(-c(journal.x, journal.y)) %>%
    dplyr::select(-c(contains('.y')))
  names(doi_refs) <- sub('.x', '', names(doi_refs))
  #lookup publisher
  doi_refs <- doi_refs %>%
    dplyr::left_join(df1, by = c("doi")) %>%
    dplyr::mutate(publisher = ifelse(is.na(publisher.x), publisher.y, publisher.x)) %>%
    dplyr::select(-c(publisher.x, publisher.y)) %>%
    dplyr::select(-c(contains('.y')))
  names(doi_refs) <- sub('.x', '', names(doi_refs))
  #lookup volume
  doi_refs <- doi_refs %>%
    dplyr::left_join(df1, by = c("doi")) %>%
    dplyr::mutate(volume = ifelse(is.na(volume.x), volume.y, volume.x)) %>%
    dplyr::select(-c(volume.x, volume.y)) %>%
    dplyr::select(-c(contains('.y')))
  names(doi_refs) <- sub('.x', '', names(doi_refs))
  #lookup issue
  doi_refs <- doi_refs %>%
    dplyr::left_join(df1, by = c("doi")) %>%
    dplyr::mutate(issue = ifelse(is.na(issue.x), issue.y, issue.x)) %>%
    dplyr::select(-c(issue.x, issue.y)) %>%
    dplyr::select(-c(contains('.y')))
  names(doi_refs) <- sub('.x', '', names(doi_refs))
  #lookup start_page
  doi_refs <- doi_refs %>%
    dplyr::left_join(df1, by = c("doi")) %>%
    dplyr::mutate(start_page = ifelse(is.na(start_page.x), start_page.y, start_page.x)) %>%
    dplyr::select(-c(start_page.x, start_page.y)) %>%
    dplyr::select(-c(contains('.y')))
  names(doi_refs) <- sub('.x', '', names(doi_refs))
  #lookup end_page
  doi_refs <- doi_refs %>%
    dplyr::left_join(df1, by = c("doi")) %>%
    dplyr::mutate(end_page = ifelse(is.na(end_page.x), end_page.y, end_page.x)) %>%
    dplyr::select(-c(end_page.x, end_page.y)) %>%
    dplyr::select(-c(contains('.y')))
  names(doi_refs) <- sub('.x', '', names(doi_refs))
  #lookup url
  doi_refs <- doi_refs %>%
    dplyr::left_join(df1, by = c("doi")) %>%
    dplyr::mutate(url = ifelse(is.na(url.x), url.y, url.x)) %>%
    dplyr::select(-c(url.x, url.y)) %>%
    dplyr::select(-c(contains('.y')))
  names(doi_refs) <- sub('.x', '', names(doi_refs))
  
  #reorder columns
  doi_refs <- doi_refs[, c("intID", "source_type", "author", "year", "title", "journal", "volume", "issue", "start_page", "end_page", "abstract", "doi", 
                           "publisher", "url")]
  
  #data frame containing duplicates for selection
  duplicate_dois <- doi_refs[duplicated(doi_refs$doi) | duplicated(doi_refs$doi, fromLast = TRUE), ]
  
}
